import { Server as HttpServer } from "http";
import { Server as SocketIOServer } from "socket.io";
import { getStorage } from "./storage";

let io: SocketIOServer;

export function setupWebSocket(httpServer: HttpServer) {
  io = new SocketIOServer(httpServer, {
    cors: {
      origin: "*",
      methods: ["GET", "POST"]
    }
  });

  io.on("connection", (socket) => {
    console.log("Client connected:", socket.id);

    // Join game session room
    socket.on("join-game", (data: { gameSessionId: string; isGameMaster?: boolean }) => {
      const { gameSessionId, isGameMaster = false } = typeof data === 'string' ? { gameSessionId: data, isGameMaster: false } : data;
      
      socket.join(`game-${gameSessionId}`);
      socket.data.isGameMaster = isGameMaster;
      socket.data.gameSessionId = gameSessionId;
      
      console.log(`Client ${socket.id} joined game ${gameSessionId}${isGameMaster ? ' as game master' : ''}`);
      
      // Count only non-game-master connections
      const room = io.sockets.adapter.rooms.get(`game-${gameSessionId}`);
      let playerCount = 0;
      if (room) {
        const socketIds = Array.from(room);
        for (const socketId of socketIds) {
          const clientSocket = io.sockets.sockets.get(socketId);
          if (clientSocket && !clientSocket.data.isGameMaster) {
            playerCount++;
          }
        }
      }
      
      io.to(`game-${gameSessionId}`).emit("player-count-updated", playerCount);
    });

    // Handle number drawing
    socket.on("draw-number", async (data: { gameSessionId: string; number: string }) => {
      try {
        const { gameSessionId, number } = data;
        const storage = getStorage();
        const session = await storage.getGameSession(gameSessionId);
        
        if (!session) {
          socket.emit("error", { message: "Game session not found" });
          return;
        }

        // Update session with new called number
        const calledNumbers = [...session.calledNumbers, number];
        const updatedSession = await storage.updateGameSession(gameSessionId, {
          currentNumber: number,
          calledNumbers
        });

        if (updatedSession) {
          // Broadcast the new number to all players in the game
          io.to(`game-${gameSessionId}`).emit("number-drawn", {
            number,
            calledNumbers,
            progress: Math.round((calledNumbers.length / 75) * 100)
          });
        }
      } catch (error) {
        socket.emit("error", { message: "Error drawing number" });
      }
    });

    // Handle number marking on cards
    socket.on("mark-number", async (data: { cardId: string; number: string; marked: boolean }) => {
      try {
        const { cardId, number, marked } = data;
        const storage = getStorage();
        const card = await storage.updateBingoCard(cardId, {});
        
        if (!card) {
          socket.emit("error", { message: "Card not found" });
          return;
        }

        let markedNumbers = [...card.markedNumbers];
        
        if (marked && !markedNumbers.includes(number)) {
          markedNumbers.push(number);
        } else if (!marked) {
          markedNumbers = markedNumbers.filter(n => n !== number);
        }

        const updatedCard = await storage.updateBingoCard(cardId, { markedNumbers });
        
        if (updatedCard) {
          // Broadcast card update to game session
          io.to(`game-${updatedCard.gameSessionId}`).emit("card-updated", updatedCard);
        }
      } catch (error) {
        socket.emit("error", { message: "Error marking number" });
      }
    });

    // Handle bingo calls
    socket.on("call-bingo", async (data: { cardId: string; gameSessionId: string }) => {
      try {
        const { cardId, gameSessionId } = data;
        const storage = getStorage();
        const card = await storage.updateBingoCard(cardId, {});
        
        if (!card) {
          socket.emit("error", { message: "Card not found" });
          return;
        }

        // Validate bingo win
        const isWinner = validateBingoWin(card);
        
        if (isWinner) {
          await storage.updateBingoCard(cardId, { isWinner: true });
          
          // Broadcast winner to all players
          io.to(`game-${gameSessionId}`).emit("bingo-winner", {
            cardId,
            playerName: card.playerName,
            cardNumber: card.cardNumber
          });
        } else {
          socket.emit("invalid-bingo", { message: "No hay patrón ganador válido" });
        }
      } catch (error) {
        socket.emit("error", { message: "Error validating bingo" });
      }
    });

    // Handle game state changes
    socket.on("update-game-state", async (data: { gameSessionId: string; updates: any }) => {
      try {
        const { gameSessionId, updates } = data;
        const storage = getStorage();
        const updatedSession = await storage.updateGameSession(gameSessionId, updates);
        
        if (updatedSession) {
          io.to(`game-${gameSessionId}`).emit("game-state-updated", updatedSession);
        }
      } catch (error) {
        socket.emit("error", { message: "Error updating game state" });
      }
    });

    socket.on("disconnect", () => {
      console.log("Client disconnected:", socket.id);
      
      // Update player count when someone disconnects
      if (socket.data.gameSessionId) {
        const gameSessionId = socket.data.gameSessionId;
        const room = io.sockets.adapter.rooms.get(`game-${gameSessionId}`);
        let playerCount = 0;
        if (room) {
          const socketIds = Array.from(room);
          for (const socketId of socketIds) {
            const clientSocket = io.sockets.sockets.get(socketId);
            if (clientSocket && !clientSocket.data.isGameMaster) {
              playerCount++;
            }
          }
        }
        io.to(`game-${gameSessionId}`).emit("player-count-updated", playerCount);
      }
    });
  });
}

// Helper function to validate bingo wins
function validateBingoWin(card: any): boolean {
  const numbers = card.numbers;
  const marked = card.markedNumbers;
  
  // Convert card numbers to flat array with positions
  const cardGrid: (number | string)[][] = [];
  const columns = ['B', 'I', 'N', 'G', 'O'];
  
  for (let row = 0; row < 5; row++) {
    cardGrid[row] = [];
    for (let col = 0; col < 5; col++) {
      const columnKey = columns[col];
      cardGrid[row][col] = numbers[columnKey][row];
    }
  }
  
  // Check horizontal lines (Binguito)
  for (let row = 0; row < 5; row++) {
    let hasLine = true;
    for (let col = 0; col < 5; col++) {
      const cellValue = cardGrid[row][col];
      const numberString = cellValue === 'FREE' ? 'FREE' : `${columns[col]}-${cellValue}`;
      if (cellValue !== 'FREE' && !marked.includes(numberString)) {
        hasLine = false;
        break;
      }
    }
    if (hasLine) return true;
  }
  
  // Add more win conditions (vertical, diagonal, etc.) as needed
  
  return false;
}

export { io };
